#!/usr/bin/env bash

# V3 Batch Check Continuous Runner with Statistics
# ÎàÑÏ†Å ÌÜµÍ≥Ñ Í∏∞Îä•Ïù¥ Ï∂îÍ∞ÄÎêú ÏßÄÏÜçÏ†Å Î∞∞Ïπò Ïã§Ìñâ Ïä§ÌÅ¨Î¶ΩÌä∏
# Usage: ./run.sh [browser]
# Examples:
#   ./run.sh          # Chrome (Í∏∞Î≥∏Í∞í)
#   ./run.sh chrome   # Chrome Î™ÖÏãúÏ†Å ÏßÄÏ†ï
#   ./run.sh firefox  # Firefox ÏÇ¨Ïö©

# Î∏åÎùºÏö∞Ï†Ä ÏÑ§Ï†ï (ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä Ïù¥ÎØ∏ ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏúºÎ©¥ Ïú†ÏßÄ)
if [ -z "$BROWSER" ]; then
    BROWSER="${1:-chrome}"
fi
export BROWSER

# ÏÉâÏÉÅ ÏΩîÎìú Ï†ïÏùò
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# PostgreSQL Ïó∞Í≤∞ Ï†ïÎ≥¥
PGHOST="mkt.techb.kr"
PGPORT="5432"
PGDATABASE="productparser_db"
PGUSER="techb_pp"
PGPASSWORD="Tech1324!"

# DB ÏÑ§Ï†ï Ï∫êÏãú
declare -A config_cache
config_fetch_count=0
config_refresh_interval=10
run_count=0

# ========== ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ§Ï†ï ==========
# ÏïàÏ†ÑÌïú ÏûÑÏãú ÎîîÎ†âÌÜ†Î¶¨ ÏÑ§Ï†ï
get_safe_temp_dir() {
    # Ïö∞ÏÑ†ÏàúÏúÑ: ÏóêÏù¥Ï†ÑÌä∏ ÎîîÎ†âÌÜ†Î¶¨ > HOME > /tmp
    if [ -w "$HOME/v3-agent" ]; then
        echo "$HOME/v3-agent/.update"
    elif [ -w "$HOME" ]; then
        echo "$HOME/.v3-agent-update"
    elif [ -w "/tmp" ]; then
        echo "/tmp/v3-agent-update"
    else
        echo "/var/tmp/v3-agent-update"
    fi
}

# ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± Î∞è Í∂åÌïú ÏÑ§Ï†ï
TEMP_DIR=$(get_safe_temp_dir)
mkdir -p "$TEMP_DIR" 2>/dev/null || {
    echo "‚ö†Ô∏è ÏûÑÏãú ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± Ïã§Ìå®: $TEMP_DIR"
    TEMP_DIR="."  # ÌòÑÏû¨ ÎîîÎ†âÌÜ†Î¶¨ ÏÇ¨Ïö©
}

UPDATE_LOCK="$TEMP_DIR/update.lock"
UPDATE_CHECK="$TEMP_DIR/last-check"
UPDATE_PID="$TEMP_DIR/update.pid"
UPDATE_INTERVAL=600  # 10Î∂Ñ (600Ï¥à)

# Stale lock Ï†ïÎ¶¨ Ìï®Ïàò
cleanup_stale_locks() {
    if [ -f "$UPDATE_PID" ]; then
        OLD_PID=$(cat "$UPDATE_PID" 2>/dev/null)
        
        # PIDÍ∞Ä Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
        if [ -n "$OLD_PID" ] && ! kill -0 "$OLD_PID" 2>/dev/null; then
            echo "üßπ Ïò§ÎûòÎêú Lock Ï†ïÎ¶¨ (PID: $OLD_PID)"
            rm -f "$UPDATE_LOCK" "$UPDATE_PID"
        fi
    fi
}

# flock ÎåÄÏ≤¥ Ìï®Ïàò (flockÏù¥ ÏóÜÎäî Í≤ΩÏö∞)
acquire_lock() {
    local max_wait=10
    local waited=0
    
    while [ $waited -lt $max_wait ]; do
        # ÏõêÏûêÏ†Å ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± ÏãúÎèÑ
        if mkdir "$UPDATE_LOCK" 2>/dev/null; then
            echo $$ > "$UPDATE_PID"
            return 0
        fi
        
        # 1Ï¥à ÎåÄÍ∏∞
        sleep 1
        waited=$((waited + 1))
        
        # 5Ï¥à ÌõÑ stale lock Ï≤¥ÌÅ¨
        if [ $waited -eq 5 ]; then
            cleanup_stale_locks
        fi
    done
    
    return 1  # Lock ÌöçÎìù Ïã§Ìå®
}

release_lock() {
    rm -rf "$UPDATE_LOCK" "$UPDATE_PID" 2>/dev/null
}

# ÏïàÏ†ÑÌïú ÏóÖÎç∞Ïù¥Ìä∏ Ï≤¥ÌÅ¨ Ìï®Ïàò
safe_update_check() {
    local current_time=$(date +%s)
    local last_check=0
    
    # 1. ÎßàÏßÄÎßâ Ï≤¥ÌÅ¨ ÏãúÍ∞Ñ ÌôïÏù∏
    if [ -f "$UPDATE_CHECK" ] && [ -r "$UPDATE_CHECK" ]; then
        last_check=$(cat "$UPDATE_CHECK" 2>/dev/null || echo 0)
        
        # Ïà´Ïûê Í≤ÄÏ¶ù
        if ! [[ "$last_check" =~ ^[0-9]+$ ]]; then
            last_check=0
        fi
        
        if [ $((current_time - last_check)) -lt $UPDATE_INTERVAL ]; then
            return 0
        fi
    fi
    
    # 2. Lock ÌöçÎìù
    if ! acquire_lock; then
        echo "[$(date '+%H:%M:%S')] Îã§Î•∏ ÌîÑÎ°úÏÑ∏Ïä§Í∞Ä ÏóÖÎç∞Ïù¥Ìä∏ Ï≤¥ÌÅ¨ Ï§ë..."
        return 0
    fi
    
    # trapÏúºÎ°ú ÎπÑÏ†ïÏÉÅ Ï¢ÖÎ£å ÏãúÏóêÎèÑ lock Ìï¥Ï†ú
    trap 'release_lock' EXIT INT TERM
    
    # 3. Lock ÌöçÎìù ÌõÑ Îã§Ïãú ÏãúÍ∞Ñ Ï≤¥ÌÅ¨
    if [ -f "$UPDATE_CHECK" ]; then
        last_check=$(cat "$UPDATE_CHECK" 2>/dev/null || echo 0)
        if [ $((current_time - last_check)) -lt $UPDATE_INTERVAL ]; then
            release_lock
            trap - EXIT INT TERM
            return 0
        fi
    fi
    
    # 4. Ï≤¥ÌÅ¨ ÏãúÍ∞Ñ Í∏∞Î°ù
    echo "$current_time" > "$UPDATE_CHECK" || {
        echo "‚ö†Ô∏è Ï≤¥ÌÅ¨ ÏãúÍ∞Ñ Í∏∞Î°ù Ïã§Ìå®"
    }
    
    # 5. Git ÏÉÅÌÉú ÌôïÏù∏
    if ! git status >/dev/null 2>&1; then
        echo "‚ùå Git Ï†ÄÏû•ÏÜåÍ∞Ä ÏïÑÎãôÎãàÎã§"
        release_lock
        trap - EXIT INT TERM
        return 1
    fi
    
    # 6. Î°úÏª¨ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ï≤¥ÌÅ¨
    if ! git diff --quiet || ! git diff --cached --quiet; then
        echo "‚ö†Ô∏è Î°úÏª¨ Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏûàÏñ¥ ÏóÖÎç∞Ïù¥Ìä∏ Ïä§ÌÇµ"
        release_lock
        trap - EXIT INT TERM
        return 0
    fi
    
    # 7. ÏóÖÎç∞Ïù¥Ìä∏ Ï≤¥ÌÅ¨ (ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò Ï≤òÎ¶¨)
    echo "[$(date '+%H:%M:%S')] üîç ÏóÖÎç∞Ïù¥Ìä∏ ÌôïÏù∏ Ï§ë... ($BROWSER)"
    
    if ! git fetch origin main --quiet 2>/dev/null; then
        echo "[$(date '+%H:%M:%S')] ‚ö†Ô∏è ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ Ïã§Ìå®"
        release_lock
        trap - EXIT INT TERM
        return 0
    fi
    
    LOCAL_COMMIT=$(git rev-parse HEAD 2>/dev/null)
    REMOTE_COMMIT=$(git rev-parse origin/main 2>/dev/null)
    
    if [ -z "$LOCAL_COMMIT" ] || [ -z "$REMOTE_COMMIT" ]; then
        echo "[$(date '+%H:%M:%S')] ‚ö†Ô∏è Ïª§Î∞ã Ï†ïÎ≥¥ ÌôïÏù∏ Ïã§Ìå®"
        release_lock
        trap - EXIT INT TERM
        return 0
    fi
    
    if [ "$LOCAL_COMMIT" != "$REMOTE_COMMIT" ]; then
        echo "[$(date '+%H:%M:%S')] üÜï ÏÉà Î≤ÑÏ†Ñ Î∞úÍ≤¨!"
        echo "  ÌòÑÏû¨: ${LOCAL_COMMIT:0:7}"
        echo "  ÏµúÏã†: ${REMOTE_COMMIT:0:7}"
        
        # Î∞±ÏóÖ ÏÉùÏÑ± (ÏÑ†ÌÉùÏÇ¨Ìï≠)
        BACKUP_DIR="$HOME/v3-agent-backup-$(date +%Y%m%d-%H%M%S)"
        cp -r "$HOME/v3-agent" "$BACKUP_DIR" 2>/dev/null && {
            echo "[$(date '+%H:%M:%S')] üíæ Î∞±ÏóÖ ÏÉùÏÑ±: $BACKUP_DIR"
        }
        
        # ÏóÖÎç∞Ïù¥Ìä∏ ÏàòÌñâ
        if git pull origin main --quiet 2>/dev/null; then
            echo "[$(date '+%H:%M:%S')] ‚úÖ ÏΩîÎìú ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ"
            
            # npm ÏóÖÎç∞Ïù¥Ìä∏ (ÏóêÎü¨ Î¨¥Ïãú)
            npm install --quiet 2>/dev/null || {
                echo "[$(date '+%H:%M:%S')] ‚ö†Ô∏è npm install Í≤ΩÍ≥† (Í≥ÑÏÜç ÏßÑÌñâ)"
            }
            
            # Ïû¨ÏãúÏûë ÌîåÎûòÍ∑∏
            touch "$TEMP_DIR/restart-required"
            echo "[$(date '+%H:%M:%S')] üîÑ Ïû¨ÏãúÏûë ÌïÑÏöî"
        else
            echo "[$(date '+%H:%M:%S')] ‚ùå Git pull Ïã§Ìå®"
            
            # Î°§Î∞± (Î∞±ÏóÖÏù¥ ÏûàÏúºÎ©¥)
            if [ -d "$BACKUP_DIR" ]; then
                echo "[$(date '+%H:%M:%S')] üîô Ïù¥Ï†Ñ Î≤ÑÏ†ÑÏúºÎ°ú Î°§Î∞±..."
                rm -rf "$HOME/v3-agent"
                mv "$BACKUP_DIR" "$HOME/v3-agent"
            fi
        fi
    else
        echo "[$(date '+%H:%M:%S')] ‚úì ÏµúÏã† Î≤ÑÏ†ÑÏûÖÎãàÎã§"
    fi
    
    # 8. Ï†ïÎ¶¨
    release_lock
    trap - EXIT INT TERM
    
    return 0
}

# Ïû¨ÏãúÏûë Ï≤¥ÌÅ¨ Ìï®Ïàò
check_restart_required() {
    if [ -f "$TEMP_DIR/restart-required" ]; then
        echo "[$(date '+%H:%M:%S')] üîÑ ÏóÖÎç∞Ïù¥Ìä∏Î°ú Ïù∏Ìïú Ïû¨ÏãúÏûë..."
        rm -f "$TEMP_DIR/restart-required"
        
        # Ï†ïÎ¶¨ ÏûëÏóÖ
        rm -f "$UPDATE_LOCK" "$UPDATE_PID"
        
        # ÏÉà ÌîÑÎ°úÏÑ∏Ïä§Î°ú Ïû¨ÏãúÏûë
        exec "$0" "$@"
    fi
}

# DBÏóêÏÑú ÏÑ§Ï†ï Í∞ÄÏ†∏Ïò§Í∏∞ Ìï®Ïàò
fetch_config_from_db() {
    # Î∞∞Ïó¥Ïù¥ ÏÑ†Ïñ∏ÎêòÏßÄ ÏïäÏïòÎã§Î©¥ Îã§Ïãú ÏÑ†Ïñ∏
    if ! declare -p config_cache &>/dev/null; then
        declare -gA config_cache
    fi
    
    echo -e "${CYAN}üìã DBÏóêÏÑú ÏÑ§Ï†ïÏùÑ Í∞ÄÏ†∏Ïò§Îäî Ï§ë...${NC}"
    
    # psqlÎ°ú ÏÑ§Ï†ï Ï°∞Ìöå
    local query="SELECT config_key, config_value FROM v3_agent_config WHERE config_key IS NOT NULL AND config_value IS NOT NULL"
    local result=$(PGPASSWORD=$PGPASSWORD psql -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDATABASE -t -A -F"|" -c "$query" 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        # ÏÑ§Ï†ï ÌååÏã± Î∞è Ï†ÄÏû•
        while IFS='|' read -r key value; do
            # Í≥µÎ∞± Ï†úÍ±∞ Î∞è Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
            key=$(echo "$key" | xargs)
            value=$(echo "$value" | xargs)
            
            if [ -n "$key" ] && [ -n "$value" ]; then
                config_cache["$key"]="$value"
            fi
        done <<< "$result"
        
        echo -e "${GREEN}‚úÖ DB ÏÑ§Ï†ï Î°úÎìú ÏôÑÎ£å${NC}"
        config_fetch_count=0
        return 0
    else
        echo -e "${RED}‚ùå DB ÏÑ§Ï†ï Î°úÎìú Ïã§Ìå®${NC}"
        return 1
    fi
}

# ÏÑ§Ï†ï Í∞ÄÏ†∏Ïò§Í∏∞ (Ï∫êÏãúÏóêÏÑúÎßå)
get_config() {
    local key=$1
    local default_value=$2
    
    # Î∞∞Ïó¥ Ï°¥Ïû¨ Î∞è ÌÇ§ Ï°¥Ïû¨ ÌôïÏù∏
    if declare -p config_cache &>/dev/null && [ -n "${config_cache[$key]+x}" ]; then
        echo "${config_cache[$key]}"
    else
        echo "$default_value"
    fi
}

# Ï¥àÍ∏∞ ÏÑ§Ï†ï Î°úÎìú Î∞è Ï†ÅÏö©
apply_config() {
    KEYWORDS_PER_BATCH=$(get_config "keywords_per_batch" "1")
    SUCCESS_INTERVAL=$(get_config "success_delay" "5")
    BASE_INTERVAL=$(get_config "no_keyword_delay" "60")
    MAX_INTERVAL=$(get_config "no_keyword_delay_max" "605")
    FAIL_BASE_INTERVAL=$(get_config "fail_delay" "60")
    FAIL_MAX_INTERVAL=$(get_config "fail_delay_max" "600")
    BLOCK_BASE_INTERVAL=$(get_config "block_delay" "20")
    BLOCK_MAX_INTERVAL=$(get_config "block_delay_max" "600")
    
    # config_refresh_interval ÏóÖÎç∞Ïù¥Ìä∏
    local refresh_val=$(get_config "config_refresh_interval" "10")
    if [ -n "$refresh_val" ]; then
        config_refresh_interval=$refresh_val
    fi
}

# Ï¥àÍ∏∞ ÏÑ§Ï†ï Î°úÎìú
run_count=$((run_count + 1))
fetch_config_from_db
apply_config
current_interval=$SUCCESS_INTERVAL
no_keyword_count=0
fail_count=0
block_count=0

# ÎàÑÏ†Å ÌÜµÍ≥Ñ Î≥ÄÏàò
total_runs=0
total_success=0
total_failed=0
total_no_keywords=0
total_blocked=0
session_start_time=$(date '+%Y-%m-%d %H:%M:%S')
session_start_seconds=$(date +%s)

# Ïã§Ìñâ Ï§ëÏù∏ Î≤ÑÏ†Ñ Í∏∞Î°ù
RUNNING_VERSION_FILE="$HOME/v3-agent/.running-version-$BROWSER"
mkdir -p "$(dirname "$RUNNING_VERSION_FILE")"
echo $(git rev-parse HEAD 2>/dev/null) > "$RUNNING_VERSION_FILE"

# ÏÑ∏ÏÖò Í≤ΩÍ≥º ÏãúÍ∞Ñ Í≥ÑÏÇ∞
calculate_duration() {
    local now=$(date +%s)
    local diff=$((now - session_start_seconds))
    local hours=$((diff / 3600))
    local minutes=$(((diff % 3600) / 60))
    local seconds=$((diff % 60))
    printf "%02d:%02d:%02d" $hours $minutes $seconds
}

# ÏÑ±Í≥µÎ•† Í≥ÑÏÇ∞
calculate_success_rate() {
    local total_attempts=$((total_success + total_failed + total_blocked))
    if [ $total_attempts -eq 0 ]; then
        echo "0"
    else
        echo "scale=1; $total_success * 100 / $total_attempts" | bc
    fi
}

# ÌÜµÍ≥Ñ ÌëúÏãú Ìï®Ïàò
show_stats() {
    echo -e "\n${BLUE}üìä ============== ÏÑ∏ÏÖò ÎàÑÏ†Å ÌÜµÍ≥Ñ ==============${NC}"
    echo -e "üïê ÏãúÏûë ÏãúÍ∞Ñ: $session_start_time"
    echo -e "‚è±Ô∏è  Í≤ΩÍ≥º ÏãúÍ∞Ñ: $(calculate_duration)"
    echo -e "üîÑ Ï†ÑÏ≤¥ Ïã§Ìñâ: ${CYAN}$total_runs${NC}Ìöå"
    echo ""
    echo -e "‚úÖ ${GREEN}ÏÑ±Í≥µ: $total_success${NC}"
    echo -e "‚ùå ${RED}Ïã§Ìå®: $total_failed${NC}"
    echo -e "üö´ ${RED}Ï∞®Îã®: $total_blocked${NC}"
    echo -e "üì≠ ${YELLOW}ÌÇ§ÏõåÎìú ÏóÜÏùå: $total_no_keywords${NC}"
    echo ""
    local success_rate=$(calculate_success_rate)
    echo -e "üìà ÏÑ±Í≥µÎ•†: ${GREEN}${success_rate}%${NC}"
    local total_attempts=$((total_success + total_failed + total_blocked))
    echo -e "üîç Ï†ÑÏ≤¥ ÏãúÎèÑ: $total_attempts"
    echo -e "${BLUE}=============================================${NC}"
}

# Ï¥àÍ∏∞ ÌôîÎ©¥ ÌëúÏãú
clear
echo -e "${CYAN}=== V3 Batch Check Continuous Mode (with Stats) ===${NC}"
echo ""

# ÏΩîÎìú Î≤ÑÏ†Ñ Ï≤¥ÌÅ¨ Ìï®Ïàò
check_code_version() {
    if [ -f "$RUNNING_VERSION_FILE" ]; then
        RUNNING_VERSION=$(cat "$RUNNING_VERSION_FILE" 2>/dev/null)
        CURRENT_VERSION=$(git rev-parse HEAD 2>/dev/null)
        
        if [ -n "$RUNNING_VERSION" ] && [ -n "$CURRENT_VERSION" ] && [ "$RUNNING_VERSION" != "$CURRENT_VERSION" ]; then
            echo "[$(date '+%H:%M:%S')] üîÑ ÏΩîÎìúÍ∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§. Ïû¨ÏãúÏûë..."
            echo "  Ïã§Ìñâ Ï§ë: ${RUNNING_VERSION:0:7}"
            echo "  ÌòÑÏû¨ ÏΩîÎìú: ${CURRENT_VERSION:0:7}"
            
            # ÏÉà Î≤ÑÏ†Ñ Í∏∞Î°ù
            echo "$CURRENT_VERSION" > "$RUNNING_VERSION_FILE"
            
            # Ïû¨ÏãúÏûë
            exec "$0" "$@"
        fi
    fi
}

# Ïπ¥Ïö¥Ìä∏Îã§Ïö¥ ÌëúÏãú Ìï®Ïàò
countdown() {
    local seconds=$1
    local message=$2
    
    echo -ne "\r$message"
    
    while [ $seconds -gt 0 ]; do
        local mins=$((seconds / 60))
        local secs=$((seconds % 60))
        echo -ne "\r$message $(printf "%02d:%02d" $mins $secs) "
        sleep 1
        ((seconds--))
    done
    echo -ne "\r                                                              \r"
}

# Î©îÏù∏ Î£®ÌîÑ
while true; do
    total_runs=$((total_runs + 1))
    run_count=$((run_count + 1))
    
    # ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ï≤¥ÌÅ¨ (Îß§ ÏÇ¨Ïù¥ÌÅ¥ÎßàÎã§, 10Î∂Ñ Í∞ÑÍ≤©)
    safe_update_check
    
    # Ïû¨ÏãúÏûë ÌïÑÏöî Ïó¨Î∂Ä ÌôïÏù∏
    check_restart_required
    
    # ÏΩîÎìú Î≤ÑÏ†Ñ Ï≤¥ÌÅ¨ (Îã§Î•∏ Î∏åÎùºÏö∞Ï†ÄÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÌñàÏùÑ Ïàò ÏûàÏùå)
    check_code_version
    
    # ÏÑ§Ï†ï Í∞±Ïã† Ï≤¥ÌÅ¨ (10ÌöåÎßàÎã§)
    if [ $((run_count % config_refresh_interval)) -eq 0 ]; then
        echo -e "${CYAN}üîÑ ÏÑ§Ï†ï Í∞±Ïã† Ï§ë... (Îß§ ${config_refresh_interval}Ìöå Ïã§ÌñâÎßàÎã§)${NC}"
        fetch_config_from_db
        apply_config
    fi
    
    # ÌÜµÍ≥Ñ Î®ºÏ†Ä ÌëúÏãú (Ïò§Î•ò Î¨¥Ïãú)
    show_stats 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è ÌÜµÍ≥Ñ ÌëúÏãú Ï§ë Ïò§Î•ò (Î¨¥ÏãúÎê®)${NC}"
    
    echo ""
    echo "========================================="
    echo -e "Run #$total_runs - $(date '+%Y-%m-%d %H:%M:%S') - Browser: ${BROWSER^^}"
    echo "========================================="
    
    # Î∞∞Ïπò Ïã§Ìñâ Î∞è Ï∂úÎ†• Ï∫°Ï≤ò (Í∞ÑÍ≤∞Ìïú Î≤ÑÏ†Ñ ÏÇ¨Ïö©)
    output=$(node check.js $KEYWORDS_PER_BATCH 2>&1)
    exit_code=$?
    
    # Ï∂úÎ†• ÌëúÏãú
    echo "$output"
    
    # Ï¢ÖÎ£å ÏΩîÎìú ÌôïÏù∏
    if [ $exit_code -ne 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Batch check failed with exit code: $exit_code${NC}"
    fi
    
    # Í≤∞Í≥º Î∂ÑÏÑù Î∞è ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
    is_failed=false
    is_blocked=false
    
    # Ï∞®Îã® Í∞êÏßÄ (Ïã§Ï†ú ÎÑ§Ìä∏ÏõåÌÅ¨ Ï∞®Îã®Îßå) - Ïö∞ÏÑ†ÏàúÏúÑ ÏµúÏÉÅÏúÑ
    if echo "$output" | grep -q -E "(ERR_HTTP2_PROTOCOL_ERROR|ERR_CONNECTION_CLOSED|NS_ERROR_NET_INTERRUPT|HTTP/2 Error: INTERNAL_ERROR|net::ERR_FAILED|403 Forbidden|BLOCKED|blocked|Ï∞®Îã®|Bot Detection|Security Challenge|chrome-error://|Error page detected|WebKit search navigation failed|infinite loading suspected)"; then
        is_blocked=true
        total_blocked=$((total_blocked + 1))
        # Ï∞®Îã® ÏõêÏù∏ ÌëúÏãú
        if echo "$output" | grep -q "ERR_HTTP2_PROTOCOL_ERROR"; then
            block_reason="üîí ERR_HTTP2_PROTOCOL_ERROR (HTTPS Ï∞®Îã®)"
        elif echo "$output" | grep -q "NS_ERROR_NET_INTERRUPT"; then
            block_reason="üîí NS_ERROR_NET_INTERRUPT (Firefox ÎÑ§Ìä∏ÏõåÌÅ¨ Ï∞®Îã®)"
        elif echo "$output" | grep -q "HTTP/2 Error: INTERNAL_ERROR"; then
            block_reason="üîí HTTP/2 Error: INTERNAL_ERROR (WebKit ÎÑ§Ìä∏ÏõåÌÅ¨ Ï∞®Îã®)"
        elif echo "$output" | grep -q "Security Challenge"; then
            block_reason="üõ°Ô∏è Coupang Security Challenge"
        elif echo "$output" | grep -q "Bot Detection"; then
            block_reason="ü§ñ Coupang Bot Detection"
        elif echo "$output" | grep -q "Suspicious Response"; then
            block_reason="‚ö†Ô∏è Suspicious Response"
        elif echo "$output" | grep -q "Timeout.*exceeded"; then
            block_reason="‚è±Ô∏è Timeout exceeded"
        elif echo "$output" | grep -q "net::ERR_"; then
            block_reason="üåê Network error"
        elif echo "$output" | grep -q -E "(403 Forbidden|HTTP 403|Error 403)"; then
            block_reason="üö´ HTTP 403 Forbidden"
        elif echo "$output" | grep -q "browserType\.launch:"; then
            block_reason="üñ•Ô∏è Browser launch failed"
        elif echo "$output" | grep -q "Target.*closed"; then
            block_reason="üéØ Target closed error"
        elif echo "$output" | grep -q "Error page detected"; then
            block_reason="üåê Error page detected (Network blocked)"
        elif echo "$output" | grep -q "Execution context was destroyed"; then
            block_reason="üîÑ Page navigation detected (Context destroyed)"
        elif echo "$output" | grep -q -E "(WebKit search navigation failed|infinite loading suspected)"; then
            block_reason="üîÑ WebKit Î¨¥Ìïú Î°úÎî© (Í≤ÄÏÉâ ÌéòÏù¥ÏßÄ Ï†ÑÌôò Ïã§Ìå®)"
        else
            block_reason="üö® Unknown Block"
        fi
    # ÌÉÄÏûÑÏïÑÏõÉ Í∞êÏßÄ (Ï∞®Îã®Ïù¥ ÏïÑÎãò)
    elif echo "$output" | grep -q -E "(Timeout.*exceeded|waitForSelector.*Timeout|waitForFunction.*Timeout)"; then
        total_failed=$((total_failed + 1))
        echo ""
        echo -e "${YELLOW}‚è±Ô∏è Timeout occurred - retrying immediately${NC}"
        current_interval=$SUCCESS_INTERVAL  # 5Ï¥àÎßå ÎåÄÍ∏∞
        no_keyword_count=0
        fail_count=0
        block_count=0
        
    # ÌÇ§ÏõåÎìú ÏóÜÏùå Í∞êÏßÄ
    elif echo "$output" | grep -q "No keywords to check"; then
        total_no_keywords=$((total_no_keywords + 1))
        no_keyword_count=$((no_keyword_count + 1))
    # ÏÑ±Í≥µ Í∞êÏßÄ (Checked Î°úÍ∑∏Í∞Ä ÏûàÍ≥† FailedÍ∞Ä 0Ïù∏ Í≤ΩÏö∞)
    elif echo "$output" | grep -q "Checked: [0-9]"; then
        if echo "$output" | grep -q "Failed: 0"; then
            # Ïã§Ìå®Í∞Ä ÏóÜÏúºÎ©¥ ÏÑ±Í≥µ
            total_success=$((total_success + 1))
        else
            # FailedÍ∞Ä 0Ïù¥ ÏïÑÎãàÎ©¥ Ïã§Ìå®
            total_failed=$((total_failed + 1))
        fi
    # Ïã§Ìå® Í∞êÏßÄ (ÎßàÏßÄÎßâ Ïö∞ÏÑ†ÏàúÏúÑ)
    elif [ $exit_code -ne 0 ] || echo "$output" | grep -q "Failed:"; then
        is_failed=true
        total_failed=$((total_failed + 1))
    fi
    
    # ÎåÄÍ∏∞ ÏãúÍ∞Ñ Í≤∞Ï†ï
    if [ "$is_blocked" = true ]; then
        # Ï∞®Îã®Îêú Í≤ΩÏö∞
        block_count=$((block_count + 1))
        if [ $block_count -eq 1 ]; then
            current_interval=$BLOCK_BASE_INTERVAL
        else
            current_interval=$((current_interval + 60))
            if [ $current_interval -gt $BLOCK_MAX_INTERVAL ]; then
                current_interval=$BLOCK_MAX_INTERVAL
            fi
        fi
        echo ""
        echo -e "${RED}üö´ Blocked detected: ${block_reason} (${block_count} times)${NC}"
        echo -e "‚è±Ô∏è  Next check in ${current_interval}s"
        no_keyword_count=0
        fail_count=0
        
    elif echo "$output" | grep -q "No keywords to check"; then
        # ÌÇ§ÏõåÎìú ÏóÜÎäî Í≤ΩÏö∞
        if [ $no_keyword_count -eq 1 ]; then
            current_interval=$BASE_INTERVAL
        else
            current_interval=$((current_interval + 60))
            if [ $current_interval -gt $MAX_INTERVAL ]; then
                current_interval=$MAX_INTERVAL
            fi
        fi
        echo ""
        echo -e "${YELLOW}üìä No keywords found (${no_keyword_count} times)${NC}"
        echo -e "‚è±Ô∏è  Next check in ${current_interval}s"
        fail_count=0
        block_count=0
        
    elif [ "$is_failed" = true ]; then
        # Ïã§Ìå®Ìïú Í≤ΩÏö∞
        fail_count=$((fail_count + 1))
        if [ $fail_count -eq 1 ]; then
            current_interval=$FAIL_BASE_INTERVAL
        else
            current_interval=$((current_interval + 60))
            if [ $current_interval -gt $FAIL_MAX_INTERVAL ]; then
                current_interval=$FAIL_MAX_INTERVAL
            fi
        fi
        echo ""
        echo -e "${RED}‚ùå Batch failed (${fail_count} times)${NC}"
        echo -e "‚è±Ô∏è  Next check in ${current_interval}s"
        no_keyword_count=0
        block_count=0
        
    else
        # ÏÑ±Í≥µÌïú Í≤ΩÏö∞
        if [ $no_keyword_count -gt 0 ] || [ $fail_count -gt 0 ] || [ $block_count -gt 0 ] || [ $current_interval -ne $SUCCESS_INTERVAL ]; then
            echo ""
            echo -e "${GREEN}‚úÖ Keyword processed successfully! Next check in ${SUCCESS_INTERVAL}s${NC}"
        fi
        current_interval=$SUCCESS_INTERVAL
        no_keyword_count=0
        fail_count=0
        block_count=0
    fi
    
    # Îã§Ïùå Ïã§ÌñâÍπåÏßÄ Ïπ¥Ïö¥Ìä∏Îã§Ïö¥
    echo ""
    countdown $current_interval "üí§ Next run in:"
done

echo ""
echo "=== Batch check continuous mode ended ==="